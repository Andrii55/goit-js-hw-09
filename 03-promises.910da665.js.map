{"mappings":"gfAAA,IAAAA,EAAAC,EAAA,SAEMC,EAAOC,SAASC,cAAc,SAC9BC,EAAaH,EAAKI,SAASC,MAC3BC,EAAYN,EAAKI,SAASG,KAC1BC,EAAcR,EAAKI,SAASK,OAElCT,EAAKU,iBAAiB,UAAU,SAAAC,GAC9BA,EAAEC,iBACF,IAAMP,EAAQQ,OAAOV,EAAWW,OAC1BP,EAAOM,OAAOP,EAAUQ,OACxBL,EAASI,OAAOL,EAAYM,OAClC,GAAKT,GAAUE,GAASE,EAAxB,CAKA,IAAMM,EAAWC,MAAMC,KAAK,CAAEC,OAAQT,IAAU,SAACU,EAAGC,GAGlD,OAgBJ,SAAuBC,EAAUhB,GAC/B,OAAO,IAAIiB,SAAQ,SAACC,EAASC,GAC3B,IAAMC,EAAgBC,KAAKC,SAAW,GACtCC,YAAW,WACLH,GACF3B,EAAA+B,OAAgBC,QACd,WAAuCC,OAA5BV,EAAS,qBAAyBU,OAAN1B,EAAM,OAE/CkB,EAAQ,CAAEF,WAAUhB,YAEpBP,EAAA+B,OAAgBG,QACd,WAAsCD,OAA3BV,EAAS,oBAAwBU,OAAN1B,EAAM,OAE9CmB,EAAO,CAAEH,WAAUhB,U,GAEpBA,E,IA/BI4B,CAFUb,EAAI,EACAf,EAAQE,EAAOa,E,IAItCtB,EAAA+B,OAAgBK,KAAK,YAA4BH,OAAhBhB,EAASG,OAAO,iBAEjDI,QAAQa,IAAIpB,GACTqB,MAAK,SAAAC,GACJvC,EAAA+B,OAAgBC,QAAQ,GAAkBC,OAAfM,EAAQnB,OAAO,uB,IAE3CoB,OAAM,SAAAC,GACLzC,EAAA+B,OAAgBG,QACd,GAA4CD,OAAzCQ,EAAMlB,SAAS,4BAAsCU,OAAZQ,EAAMlC,MAAM,M,SAlB5DP,EAAA+B,OAAgBG,QAAQ,8C","sources":["src/js/03-promises.js"],"sourcesContent":["import * as notiflix from 'notiflix';\n\nconst form = document.querySelector('.form');\nconst delayInput = form.elements.delay;\nconst stepInput = form.elements.step;\nconst amountInput = form.elements.amount;\n\nform.addEventListener('submit', e => {\n  e.preventDefault();\n  const delay = Number(delayInput.value);\n  const step = Number(stepInput.value);\n  const amount = Number(amountInput.value);\n  if (!delay || !step || !amount) {\n    notiflix.Notify.failure('All fields are required and must be numbers');\n    return;\n  }\n\n  const promises = Array.from({ length: amount }, (_, i) => {\n    const position = i + 1;\n    const currentDelay = delay + step * i;\n    return createPromise(position, currentDelay);\n  });\n\n  notiflix.Notify.info(`Creating ${promises.length} promises...`);\n\n  Promise.all(promises)\n    .then(results => {\n      notiflix.Notify.success(`${results.length} promises fulfilled`);\n    })\n    .catch(error => {\n      notiflix.Notify.failure(\n        `${error.position} promise rejected after ${error.delay}ms`\n      );\n    });\n});\n\nfunction createPromise(position, delay) {\n  return new Promise((resolve, reject) => {\n    const shouldResolve = Math.random() > 0.3;\n    setTimeout(() => {\n      if (shouldResolve) {\n        notiflix.Notify.success(\n          `Promise ${position} fulfilled after ${delay}ms`\n        );\n        resolve({ position, delay });\n      } else {\n        notiflix.Notify.failure(\n          `Promise ${position} rejected after ${delay}ms`\n        );\n        reject({ position, delay });\n      }\n    }, delay);\n  });\n}\n"],"names":["$6JpON","parcelRequire","$ce04d3a99e08e73b$var$form","document","querySelector","$ce04d3a99e08e73b$var$delayInput","elements","delay","$ce04d3a99e08e73b$var$stepInput","step","$ce04d3a99e08e73b$var$amountInput","amount","addEventListener","e","preventDefault","Number","value","promises","Array","from","length","_","i","position","Promise","resolve","reject","shouldResolve","Math","random","setTimeout","Notify","success","concat","failure","$ce04d3a99e08e73b$var$createPromise","info","all","then","results","catch","error"],"version":3,"file":"03-promises.910da665.js.map"}