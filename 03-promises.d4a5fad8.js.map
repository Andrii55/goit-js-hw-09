{"mappings":"oeAAA,IAAAA,EAAAC,EAAA,SAEA,MAAMC,EAAOC,SAASC,cAAc,SAC9BC,EAAaH,EAAKI,SAASC,MAC3BC,EAAYN,EAAKI,SAASG,KAC1BC,EAAcR,EAAKI,SAASK,OAElCT,EAAKU,iBAAiB,UAAUC,IAC9BA,EAAEC,iBACF,MAAMP,EAAQQ,OAAOV,EAAWW,OAC1BP,EAAOM,OAAOP,EAAUQ,OACxBL,EAASI,OAAOL,EAAYM,OAClC,IAAKT,IAAUE,IAASE,EAEtB,YADAX,EAAAiB,OAAgBC,QAAQ,+CAI1B,MAAMC,EAAWC,MAAMC,KAAK,CAAEC,OAAQX,IAAU,CAACY,EAAGC,IAmBtD,SAAuBC,EAAUlB,GAC/B,OAAO,IAAImB,SAAQ,CAACC,EAASC,KAC3B,MAAMC,EAAgBC,KAAKC,SAAW,GACtCC,YAAW,KACLH,GACF7B,EAAAiB,OAAgBgB,QACd,WAAWR,qBAA4BlB,OAEzCoB,EAAQ,C,SAAEF,E,MAAUlB,MAEpBP,EAAAiB,OAAgBC,QACd,WAAWO,oBAA2BlB,OAExCqB,EAAO,C,SAAEH,E,MAAUlB,I,GAEpBA,EAAM,G,CA/BF2B,CAFUV,EAAI,EACAjB,EAAQE,EAAOe,KAItCxB,EAAAiB,OAAgBkB,KAAK,YAAYhB,EAASG,sBAE1CI,QAAQU,IAAIjB,GACTkB,MAAKC,IACJtC,EAAAiB,OAAgBgB,QAAQ,GAAGK,EAAQhB,4BAA4B,IAEhEiB,OAAMC,IACLxC,EAAAiB,OAAgBC,QACd,GAAGsB,EAAMf,mCAAmCe,EAAMjC,UACnD,GACD","sources":["src/js/03-promises.js"],"sourcesContent":["import * as notiflix from 'notiflix';\n\nconst form = document.querySelector('.form');\nconst delayInput = form.elements.delay;\nconst stepInput = form.elements.step;\nconst amountInput = form.elements.amount;\n\nform.addEventListener('submit', e => {\n  e.preventDefault();\n  const delay = Number(delayInput.value);\n  const step = Number(stepInput.value);\n  const amount = Number(amountInput.value);\n  if (!delay || !step || !amount) {\n    notiflix.Notify.failure('All fields are required and must be numbers');\n    return;\n  }\n\n  const promises = Array.from({ length: amount }, (_, i) => {\n    const position = i + 1;\n    const currentDelay = delay + step * i;\n    return createPromise(position, currentDelay);\n  });\n\n  notiflix.Notify.info(`Creating ${promises.length} promises...`);\n\n  Promise.all(promises)\n    .then(results => {\n      notiflix.Notify.success(`${results.length} promises fulfilled`);\n    })\n    .catch(error => {\n      notiflix.Notify.failure(\n        `${error.position} promise rejected after ${error.delay}ms`\n      );\n    });\n});\n\nfunction createPromise(position, delay) {\n  return new Promise((resolve, reject) => {\n    const shouldResolve = Math.random() > 0.3;\n    setTimeout(() => {\n      if (shouldResolve) {\n        notiflix.Notify.success(\n          `Promise ${position} fulfilled after ${delay}ms`\n        );\n        resolve({ position, delay });\n      } else {\n        notiflix.Notify.failure(\n          `Promise ${position} rejected after ${delay}ms`\n        );\n        reject({ position, delay });\n      }\n    }, delay);\n  });\n}\n"],"names":["$7Y9D8","parcelRequire","$47d4ff9957288465$var$form","document","querySelector","$47d4ff9957288465$var$delayInput","elements","delay","$47d4ff9957288465$var$stepInput","step","$47d4ff9957288465$var$amountInput","amount","addEventListener","e","preventDefault","Number","value","Notify","failure","promises","Array","from","length","_","i","position","Promise","resolve","reject","shouldResolve","Math","random","setTimeout","success","$47d4ff9957288465$var$createPromise","info","all","then","results","catch","error"],"version":3,"file":"03-promises.d4a5fad8.js.map"}